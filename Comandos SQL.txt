  
 COMANDOS DE SQL SERVER 
 
 Crear Data Base ----- CREATE DATA BASE + NOMBRE;
 
 Crear Tabla	 ----- CREATE TABLA + NOMBRE ( nombreCambo + tipoDato(30),nombreCambo + tipoDato(30),nombreCambo + tipoDato(30));
 
 Insertar Datos  ----- INSERT INTO + NOMBRE TABLA + (CAMPO,CAMPO,CAMPO) VALUES (DATO, 'DATO');
 
 Eliminar Tabla  ----- DROP + NOMBRE Tabla;
 
 Visualizar Tabla ---- SELECT * FRONT + NombreTabla (toda la tabla)
 
 Visualizar algún Campo de la tabla ----- SELECT NombreCampo,NombreCampo, FRONT + NombreTabla
 
 Visualizar algún Dato especifico de la tabla ----- SELECT NombreCampo,NombreCampo, FRONT + NombreTabla WHERE NombreCampo= '';
 
 Condicional para crear o borrar una Tabla ----- IF OBJECT_ID('NombreTabla') is not null DROP TABLE + NombreTabla;
 
 Visualizar Tablas Existentes en Base de Datos  ---- exec tables @table_owner='dbo';
 
 Visualizar la estructura de la Tabla -----  exec sp_columns + NombreTabla;
 
 Para dividir en sublotes las consultas ----- GO  sin punto y coma 
 
 Los operadores relacionales son los siguientes:

												=	igual
												<>	distinto
												>	mayor
												<	menor
												>=	mayor o igual
												<=	menor o igual
 
SELECT precio FROM articulos WHERE precio >= 400;

SELECT codigo, nombre FROM articulos WHERE cantidad <30;

SELECT nombre, descripcion FROM  articulos WHERE precio <> 100
 
 
Para eliminar registros en especifico de una tabla ---- DELETE FROM + NombreTabla WHERE NombreCampo = 'DATO';
				
Para eliminar todos los registros de una tabla     ----  DELETE FROM + NombreTabla  
 
Actualizar (Modificar) los registros de una tabla ---- UPDATE + NombreTabla SET + NombreCampo + NuevoValor ;

Actualizar (Modificar) un solo registro de la tabla  ----- UPDATE + NombreTabla SET + NombreCampo + NuevoValor + WHERE + NombreCampo='?';

Comentarios ---- /*  */  o también --

Null significa que el dato desconocido o valor inexistente, pero no es igual a valor '0' ---- DEFINICION DEL CAMPO + NULL O NOT NULL, también se puede insertar
																							  como Null 
																							  

Primary key para que un campo no se repita ----  NombreCampo + TipoDato + NOT NULL + Primary KEY

Identity para indicar el valor de inicio de la secuencia y el incremento --- NombreCampo + TipoDato + Primary Key + Identity(inicio,incremento)

Función ident_seed() para saber el valor de inicio del campo identity  ---- SELECT indent_seed('NombreTabla');

Función  ident_incr('NombreTabla') retorna el valor de incremento del campo;

Para borrar todos los registros de una tabla sin borrar la tabla ----- TRUNCATE TABLE + NombreTabla;

Otros Tipos de datos------ TEXTO --->  char 
									   nchar
									   varchar
									   nvarchar
									   text
									   ntext
									   
						    NÚMEROS ---> tinyint	|
										 smallint	|----> Para almacenar números enteros
										 bigint		|
										 
							
										 numeric |
										 decimal |--->  Para decimales con presición
										 
										 float |
											   |---> Para decimales aproximado 	
										 real  |

										money		|
										smallmoney	|---> Para valores monetarios 
										
							FECHAS Y HORAS ---> datetime		|
												smalldatetime	|---> regla general MES-DIA-AÑO(mdy), pero se puede setear con 
																	  set dateformat dmy
												
Insertar datos sin enunciar los campos  y sin todos los Values ---> -- Si ingresamos valores para todos los campos, podemos omitir la lista de campos:
																			insert into libros
																			  values ('Uno','Richard Bach','Planeta');

																	-- Podemos ingresar valores para algunos de los campos:
																			insert into libros (titulo, autor)
																			  values ('El aleph','Borges');

Declarar un campo con un valor por defecto ---> CREATE TABLA NombreTabla (nombreCampo + tipoDato () + not null + default 'DatoPermanente' o default 0);

												INSERT INTO NombreTabla (campos) values ('El gato con botas',default,default,100);